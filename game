 
//  GameScreen.swift
 
// libraries needed
import SpriteKit
import GameplayKit
import Foundation
 
 
var score = 0 // resets the score after each game
 
class GameScene: SKScene, SKPhysicsContactDelegate
 
{
    enum gameState{
        case preGame // before game starts
        case inGame //during game
        case endGame //after game
    }
    
    var currentGameState = gameState.preGame
    let scoreLabel = SKLabelNode(fontNamed: "Consequences")
    let levelLabel = SKLabelNode(fontNamed: "Consequences")
    let startLabel = SKLabelNode(fontNamed: "Consequences")
   
    
    var level = 0 //resets level
    
    
    struct PhysicsCategories {
        static let None : UInt32 = 0
        static let Player : UInt32 = 0b1 //1
        static let Creature: UInt32 = 0b10 //2 
        static let Coin: UInt32 = 4
        static let Treasure: UInt32 = 8
         
           }
    
    
    func random () -> CGFloat {
        return CGFloat (Float(arc4random()) / 4294967296)
    } // '4294967295' is not exactly representable as 'Float'; it becomes '4294967296' 0xFFFFFFFF
    
    func random (min: CGFloat, max : CGFloat) -> CGFloat {
        return random() * (max - min) + min
    }
 
    var gameArea: CGRect
 
    
    override init(size: CGSize) {
        if UIDevice().userInterfaceIdiom == .phone && UIScreen.main.nativeBounds.height == 2436 {
            //iPhone X
            let maxAspectRatio: CGFloat = 19.5/9.0
            let playableWidth = size.height / maxAspectRatio
            let margin = (size.width - playableWidth) / 2
            gameArea = CGRect(x: margin, y: 0, width: playableWidth, height: size.height)
        }
        
        else {
            let maxAspectRatio: CGFloat = 16.0/9.0
            let playableWidth = size.height / maxAspectRatio
            let margin = (size.width - playableWidth) / 2
            gameArea = CGRect(x: margin, y: 0, width: playableWidth, height: size.height)
        }
 
        super.init(size: size)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
  
    
    override func didMove(to view: SKView) {
        
        self.physicsWorld.contactDelegate = self
 
        score = 0 //restarts score
 
        //creates background
       
        let background = SKSpriteNode(imageNamed:"background")
        background.size = self.size
        background.position = CGPoint(x: self.size.width/2, y: self.size.height/2)
        background.zPosition = 0
        self.addChild(background)
    
        
        scoreLabel.position = CGPoint(x: self.size.width/2, y: self.size.height + scoreLabel.frame.size.height)
        scoreLabel.fontColor = .white
        scoreLabel.fontSize = 150
        scoreLabel.zPosition = 100
        scoreLabel.text = String(score)
        self.addChild(scoreLabel)
       
    
        let moveToScreen = SKAction.moveTo(y: self.size.height * 0.8, duration: 0.3)
        scoreLabel.run(moveToScreen)
 
 	let moveToScreen = SKAction.moveTo(y: self.size.height * 0.8, duration: 0.3)
        scoreLabel.run(moveToScreen)
        
        startLabel.text = "Tap to Start"
        startLabel.fontSize = 100
        startLabel.fontColor = SKColor.white
        startLabel.zPosition = 1
        startLabel.position = CGPoint (x: self.size.width/2, y: self.size.height/2)
        startLabel.alpha = 0 //see through
        self.addChild(startLabel)
        //let fadeInAction = SKAction.fadeIn(withDuration: 0.3)
       // startLabel.run(fadeInAction)
        
    }
 
    func startGame() {
       currentGameState = gameState.inGame
        let fadeOutAction = SKAction.fadeOut(withDuration: 0.5)
        let deleteAction = SKAction.removeFromParent()
        let deleteSequence = SKAction.sequence([fadeOutAction, deleteAction])
        startLabel.run(deleteSequence)
        
        //let moveEquationToScreen = SKAction.moveTo(y: self.size.height * 0.05, duration: 0.5)
        
        let startGameSequence = SKAction.sequence([moveEquationToScreen])
        block.run(startGameSequence)
    }
    
  
    func  createCreatures () {
        numCreature = Int.random (in: 1...5)
        //for loop 
self.addChild(Creature)
 
              
    }
    
    
           
               
         if currentGameState == gameState.inGame {
 
                updateFocusIfNeeded()
                didFinishUpdate()
                
                
              //if statements
    }
           
                
    
 
    func changeScene() {
        let sceneToMoveTo = GameOverScene(size: self.size)
        sceneToMoveTo.scaleMode = self.scaleMode
        let myTransition = SKTransition.fade(withDuration: 0.5)
        self.view!.presentScene(sceneToMoveTo, transition: myTransition)
    }
    
    
 func didBegin(_ contact: SKPhysicsContact) {
        var body1 = SKPhysicsBody()
        var body2 = SKPhysicsBody()
        var body3 = SKPhysicsBody()
        var body4 = SKPhysicsBody()

        
        if contact.bodyA.categoryBitMask < contact.bodyB.categoryBitMask{
            body1 = contact.bodyA
            body2 = contact.bodyB
        }
            
        else {
            body1 = contact.bodyB
            body2 = contact.bodyA
        }
  
        
        //finds the closest cube to the catcher so that it does not mistake one cube color from another
       // var distanceArray = [Int]()
        //var closestNode : SKSpriteNode?
        //scene?.enumerateChildNodes(withName: "Cube") {node,_ in

          //  if let sprite = node as? SKSpriteNode {
            //    let distance = Int(sprite.position.y)
              //  distanceArray.append(distance)
                //if distance == distanceArray.min() {
                  //  closestNode = sprite
                  
                //}

            //}

        //}


        
        if (body1.categoryBitMask == PhysicsCategories.Player) &&
            (body2.categoryBitMask == PhysicsCategories.Creature) {       
                        runGameOver()
                }
 
 
       if (body2.categoryBitMask == PhysicsCategories.Player) &&
            (body1.categoryBitMask == PhysicsCategories.Creature) {       
                        runGameOver()
                }

        
 
if (body1.categoryBitMask == PhysicsCategories.Player) &&
	(body2.categoryBitMask == PhysicsCategories.Coin) {
		coin = coin + 1
}
 
if (body2.categoryBitMask == PhysicsCategories.Player) &&
	(body1.categoryBitMask == PhysicsCategories.Coin) {
		coin = coin + 1
}
    
 
 
if (body1.categoryBitMask == PhysicsCategories.Player) &&
	(body2.categoryBitMask == PhysicsCategories.Treasure) {
		treasure = treasure + 1
}
 
if (body2.categoryBitMask == PhysicsCategories.Player) &&
	(body1.categoryBitMask == PhysicsCategories.Treasure) {
		treasure = treasure + 1
}
 
 
 
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        if currentGameState == gameState.preGame {
            startGame()
        }
    }
 
    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        
        for touch: AnyObject in touches {
            
         //call functions needed 
             let pointOfTouch = touch.location(in: self)
            let nodeITapped = atPoint(pointOfTouch)
            //let previousPointOfTouch = touch.previousLocation(in: self)
            //let amountDraggedX = pointOfTouch.x - previousPointOfTouch.x
            //let amountDraggedY = pointOfTouch.y - previousPointOfTouch.y        
            
            
//call functions needed 
    if currentGameState == gameState.inGame {
             if nodeITapped.name == "rightButton" {
               background.xposition -++
//SCROLLING BACKGROUND
            }
 
            if nodeITapped.name == "downButton" {
		player.yposition = player.yposition - 20
 
            } 

	If nodeTapped.name== “leftButton” {
	background.xposition = background.xposition - 20

	If nodeTapped.name== “upButton” {
	Player.yposition = player.yposition + 20

 
    }
}
}
